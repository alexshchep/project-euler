#!/bin/python3

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.

from bisect import bisect_left

def fibeven(n, fiblist = [1,2,3], fibdict = {1:0, 2:1, 3:2}, fibevenlist = [0,2,2]):
'''
    computes even fibonacci numbers sum
    @param n - upper bound of the computation
    @param fibdict - keep a dictionary to reuse
    fibonacci e.g [1,2,3,5,8,13,21,34,55,89]
    there is a pattern starting from 3 in terms of even - odd numbers [odd, odd, even, odd, odd, even, ...]
    need to sum only even
'''
    if n in fibdict:
        return fibevenlist[fibdict[n]], fiblist, fibdict, fibevenlist
    # check if it is bigger than the max
    if n > fiblist[-1]:
        i = len(fiblist)
        # calculate more fibs
        while True:
            temp = fiblist[-1] + fiblist[-2]
            if temp > n:
                return fibevenlist[-1], fiblist, fibdict, fibevenlist
            # update lists and dicts
            fiblist.append(temp)
            fibdict[temp] = i
            # update even list 
            # if the (index - 1) is divisible by 3
            if (i-1) % 3 == 0:
                fibevenlist.append(fibevenlist[-1] + temp)
            else:
                fibevenlist.append(fibevenlist[-1])
            i += 1            
    # find the right position
    index = bisect_left(fiblist, n)
    return fibevenlist[index-1], fiblist, fibdict, fibevenlist

if __name__ == '__main__':
  # initialize    
  fiblist = [1,2,3]
  fibdict = {1:0, 2:1, 3:2}
  fibevenlist = [0,2,2]
  n = 100
  fib, fiblist, fibdict, fibevenlist = fibeven(n, fiblist, fibdict, fibevenlist)
  print(fib)
